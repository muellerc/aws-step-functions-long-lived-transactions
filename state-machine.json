{
  "Comment": "AWS Step Functions Workshop - Managing Long Lived Transactions with AWS Step Functions State Machine",
  "StartAt": "CreateOrder",
  "TimeoutSeconds": 15,
  "States": {
    "ProcessOrder": {
      "Comment": "First transaction to create the order and set the order status to new",
      "Type": "Task",
      "Resource": "${OrderCreationFunction.Arn}",
      "TimeoutSeconds": 10,
      "Catch": [{
        "ErrorEquals": ["OrderCreationException"],
        "ResultPath": "$.error",
        "Next": "CancelOrder"
      }],
      "Next": "ProcessPayment"
    },
    "ProcessPayment": {
      "Comment": "Task processes the order payment",
      "Type": "Task",
      "Resource": "${PaymentProcessFunction.Arn}",
      "TimeoutSeconds": 10,
      "Catch": [{
        "ErrorEquals": ["PaymentProcessException"],
        "ResultPath": "$.error",
        "Next": "RefundPayment"
      }],
      "Next": "ReserveInventory"
    },
    "ReserveInventory": {
      "Comment": "Task to reserve order items in inventory",
      "Type": "Task",
      "Resource": "${InventoryReserveFunction.Arn}",
      "TimeoutSeconds": 10,
      "Catch": [{
        "ErrorEquals": ["InventoryReservationException"],
        "ResultPath": "$.error",
        "Next": "ReleaseInventory"
      }],
      "Next": "sns:NotifySuccess"
    },
    "sns:NotifySuccess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$.order_id",
        "TopicArn": "${SagaTopic}"
      },
      "ResultPath": "$.notification",
      "Next": "OrderSucceeded"
    },
    "OrderSucceeded": {
      "Type": "Succeed"
    },
    "ReleaseInventory": {
      "Comment": "Task to release order items back to inventory",
      "Type": "Task",
      "Resource": "${InventoryReleaseFunction.Arn}",
      "TimeoutSeconds": 10,
      "Retry": [{
        "ErrorEquals": ["States.ALL"],
        "IntervalSeconds": 1,
        "MaxAttempts": 2,
        "BackoffRate": 2.0
      }],
      "Catch": [{
        "ErrorEquals": ["InventoryReleaseException"],
        "ResultPath": "$.error",
        "Next": "sns:NotifyReleaseInventoryFail"
      }],
      "Next": "RefundPayment"
    },
    "sns:NotifyReleaseInventoryFail": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$.order_id",
        "TopicArn": "${SagaTopic}"
      },
      "ResultPath": "$.notification",
      "Next": "OrderFailed"
    },
    "RefundPayment": {
      "Comment": "Task to process payment refund",
      "Type": "Task",
      "Resource": "${PaymentRefundFunction.Arn}",
      "TimeoutSeconds": 10,
      "Retry": [{
        "ErrorEquals": ["States.TaskFailed"],
        "IntervalSeconds": 1,
        "MaxAttempts": 2,
        "BackoffRate": 2.0
      }],
      "Catch": [{
        "ErrorEquals": ["PaymentRefundException"],
        "ResultPath": "$.error",
        "Next": "sns:NotifyRefundPaymentFail"
      }],
      "Next": "CancelOrder"
    },
    "sns:NotifyRefundPaymentFail": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$.order_id",
        "TopicArn": "${SagaTopic}"
      },
      "ResultPath": "$.notification",
      "Next": "OrderFailed"
    },
    "CancelOrder": {
      "Comment": "Task to cancel the order",
      "Type": "Task",
      "Resource": "${OrderCancelationFunction.Arn}",
      "TimeoutSeconds": 10,
      "Catch": [{
        "ErrorEquals": ["OrderCancelationException"],
        "ResultPath": "$.error",
        "Next": "sns:NotifyUpdateOrderFail"
      }],
      "Next": "sns:NotifyUpdateOrderFail"
    },
    "sns:NotifyUpdateOrderFail": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$.order_id",
        "TopicArn": "${SagaTopic}"
      },
      "ResultPath": "$.notification",
      "Next": "OrderFailed"
    },
    "OrderFailed": {
      "Type": "Fail"
    }
  }
}